----------------->    Episode 1: Introduction to React <-----------------

--## Basic Helloworld ##-
<div id="root">
        <script>
            const heading = document.createElement("h1");
            heading.innerHTML = "Hello React! world from JavaScript!";

            const root = document.getElementById("root");
            root.appendChild(heading);
        </script>

-- React injected into the through CDN links --
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

What is available in CDN links?
what is crossorigin?

1. React is a JavaScript library for building user interfaces.
2. React allows you to create reusable UI componnets.
3. React uses a virtuak DOM to improve performance.

## React Basics ##-
1. React is create by createElement from the react library.
 ex: const heading = React.createElement("h1",{}, "hell world from React!");
  here empty object is used to pass the props or attributes.
2.Root is created by react-dom
 ex: const root = ReactDOM.creatRoot(document.getElementById("root"));
3.reactDOM.render() is used to render the react element into the root.
 ex: root.render(heading);
4. React elements are immutable.

JavaScript 
1. script code is placed another file.


/**
 * <div id="parent">
 *  <div id="child1">
 *  <h1> I am a H1 tag</h1>
 * <h2> I am a H2 tag</h2>
 * </div>
 *  <div id="child2">
 *  <h1> I am a H1 tag</h1>
 * <h2> I am a H2 tag</h2>
 * </div>
 * </div>
 */
// here more than 1 element is returned into a single parent element passed as a array.

const parent = React.createElement("div", {id: "parent"},
    [React.createElement("div", {id: "child1"},
        [ React.createElement("h1", {}, "I am a h1 tag"),React.createElement("h2", {}, "I am a h2 tag")]
    ),
    React.createElement("div", {id: "child2"},
        [ React.createElement("h1", {}, "I am a h1 tag"),React.createElement("h2", {}, "I am a h2 tag")]
    )]
    );
// const heading = React.createElement("h1", {id: "heading"}, "Hello World from React!");

console.log(parent);



const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(parent);
// React elments are immutable


       <!--   ### EPISODE -02 ##### -->
       1. how to intialize the git repository into the our project
        steps:
        1. Open the terminal.
        2. Navigate to your project directory:
            cd /Users/shaikgafoor/Desktop/2025praticeReact/Notes
        3. Initialize a Git repository:
            git init
        4. Add all files to the staging area:
            git add .
        5. Commit the changes:
            git commit -m "Initial commit"
        6. (Optional) Link to a remote repository:
            git remote add origin <repository-url>
        7. (Optional) Push the changes to the remote repository:
            git push -u origin main

2. intialize the NPM 
    steps:
    1. Open the terminal
    2. npm init 
    version, description, entry point, test command, git repository, keywords, author, license, etc.
    we get package.json file after that depencies are added.
                 <!-- package.json-->
    3. our code is a bundler to single file.
    4. bundeler is tool that takes the code and bundle it into the single file to cintinue with the code.
    5. we can use the bundeler like webpack, parcel, rollup, etc.
    6. we can use the parcel bundeler.
    7. Install the Parcel bundler:
        steps:
        1. Open the terminal.
        2. Run the following command to install Parcel globally:
            npm install -g parcel-bundler
        3. Alternatively, you can install it as a dev dependency in your project:
            npm install --save-dev parcel
        4. To bundle your application, use the following command:
            parcel index.html
        5. Parcel will automatically create a `dist` folder with the bundled files.
        6. Start the development server with hot reloading:
            parcel index.html

        <!-- dev dependency explanation:-->
            A dev dependency is a package that is only required during the development phase of a project. 
            These dependencies are not included in the production build. 
            For example, tools like Parcel, Webpack, or Babel are typically added as dev dependencies 
            because they are used to build, bundle, or transpile the code during development.
            example: install parcel as a dev dependency 
            npm install --save-dev parcel or npm install parcel -D parcel.
            "devDependencies": {
                "parcel": "^2.8.3" 
            }
            what is ^ this
            <!-- The caret (^) in a version number in package.json indicates that the package manager 
                 should install the latest minor or patch version that is compatible with the specified major version. -->
            
            difference b/w package.json and package-lock.json     The package.json and package-lock.json files are both essential in Node.js projects, but they serve different purposes. Here's a breakdown of their differences:

                 1. package.json
                 Purpose: It is the main configuration file for a Node.js project.
                 Content:
                 Lists the project's metadata (e.g., name, version, description).
                 Specifies dependencies and their version ranges (e.g., ^1.0.0 or ~1.0.0).
                 Includes scripts for running tasks (e.g., npm start, npm test).
                 Editable: You can manually edit this file to add or update dependencies, scripts, or other project details.
                 Example:
                 }
                 2. package-lock.json
                 Purpose: It locks the exact versions of dependencies and their sub-dependencies used in the project.
                 Content:
                 Contains a detailed tree of all dependencies, including their resolved versions and sources (e.g., registry URLs).
                 Ensures consistent installations across different environments.
                 Generated Automatically: This file is automatically created or updated when you run npm install.
                 Not Editable: You typically don't edit this file manually.
                 Example:
                 }
                 Key Differences:
                 Feature	package.json	package-lock.json
                 Purpose	Defines project metadata and dependencies.	Locks exact dependency versions.
                 Editable	Yes, manually edited by developers.	No, auto-generated by npm.
                 Version Ranges	Allows version ranges (e.g., ^1.0.0).	Stores exact versions (e.g., 1.0.0).
                 Dependency Tree	Does not include sub-dependencies.	Includes all dependencies and sub-dependencies.
                 Consistency	May lead to different versions on different machines.	Ensures consistent installs everywhere.
                 Why Both Are Important:
                 package.json: Acts as the blueprint for your project.
                 package-lock.json: Ensures reproducibility by locking exact dependency versions.
                 In short, package.json is for defining what your project needs, while package-lock.json ensures everyone gets the same versions of those dependencies.
                 
        7. node moduels are group of packages.
8. We run the command "npx parcel index.html" npx parcel index.html
9.difference bw the npx and npm
10.after that we can remove the package.json in main:App.js in scripts we add start:index.html automatically.
11.
@parcel/transformer-js: Browser scripts cannot have imports or exports this error we need to index.html as script is type="module"

**
 * <div id="parent">
 *  more<div id="child1">
 *  <h1> I am a H1 tag</h1>
 * <h2> I am a H2 tag</h2>
 * </div>
 *  <div id="child2">
 *  <h1> I am a H1 tag</h1>
 * <h2> I am a H2 tag</h2>
 * </div>
 * </div>
 */
// here  than 1 element is returned into a single parent element passed as a array.
const parent = React.createElement("div", { id: "parent" },
    [React.createElement("div", { id: "child1" },
        [React.createElement("h1", {}, "I am a h1 tag"), React.createElement("h2", {}, "I am a h2 tag")]
    ),
    React.createElement("div", { id: "child2" },
        [React.createElement("h1", {}, "I am a h1 tag"), React.createElement("h2", {}, "I am a h2 tag")]
    )]
);
// const heading = React.createElement("h1", {id: "heading"}, "Hello World from React!");

console.log(parent);



const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(parent);